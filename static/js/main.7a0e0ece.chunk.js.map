{"version":3,"sources":["components/Footer.js","components/Header.js","components/Register.js","components/Login.js","components/ProductCard.js","components/Cart.js","components/Products.js","components/Checkout.js","components/Thanks.js","App.js","theme.js","index.js"],"names":["Footer","_jsxs","Box","className","children","_jsx","src","alt","Header","_ref","hasHiddenAuthButtons","history","useHistory","user","localStorage","getItem","Button","startIcon","ArrowBackIcon","variant","onClick","push","Stack","direction","alignItems","_Fragment","Avatar","style","marginRight","clear","Register","enqueueSnackbar","useSnackbar","_useState","useState","username","password","confirmPassword","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","isLoading","setIsLoading","register","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","validateInput","axios","post","config","endpoint","sent","status","t0","response","data","message","stop","_x","apply","arguments","length","display","flexDirection","justifyContent","minHeight","spacing","TextField","id","label","title","name","placeholder","fullWidth","value","onChange","e","_objectSpread","target","type","helperText","CircularProgress","Link","to","Login","login","_error$response","persistLogin","token","balance","_ref2","_ref2$username","_ref2$password","setItem","ProductCard","product","handleAddToCart","Card","CardMedia","component","image","_id","CardContent","Typography","gutterBottom","fontWeight","cost","Rating","rating","readOnly","CardActions","AddShoppingCartOutlined","generateCartItemsFrom","cartData","productsData","cartProducts","i","j","productId","getTotalCartValue","undefined","reduce","acc","curr","qty","getTotalItems","map","item","count","ItemQuantity","handleAdd","handleDelete","isReadOnly","IconButton","size","color","RemoveOutlined","padding","AddOutlined","OrderDetailsView","_ref2$items","items","textAlign","Cart","_ref3","products","_ref3$items","handleQuantity","_ref3$isReadOnly","width","height","paddingX","fontSize","Divider","alignSelf","ShoppingCart","ShoppingCartOutlined","Products","productDetails","setProductDetails","filteredProducts","setFilteredProducts","_useState5","_useState6","cartItems","setCartItems","_useState7","_useState8","cartLoad","setCartLoad","_useState9","_useState10","timeoutId","setTimeoutId","_useState11","_useState12","useEffect","performAPICall","fetchCart","get","concat","performSearch","_callee2","text","_context2","debounceSearch","event","debounceTimeout","searchText","clearTimeout","timeOut","setTimeout","_callee3","_context3","abrupt","headers","Authorization","_x2","isItemInCart","isInCart","forEach","addToCart","_ref4","_callee4","_args4","_context4","preventDuplicate","addInCart","_x3","_x4","_x5","_x6","_x7","_ref5","_callee5","_context5","_x8","_x9","InputProps","endAdornment","InputAdornment","position","Search","Grid","container","xs","md","py","my","mx","SentimentDissatisfied","backgroundColor","AddNewAddressView","newAddress","handleNewAddress","addAddress","multiline","minRows","isAddingNewAddress","Checkout","setItems","setProducts","all","selected","addresses","setAddresses","setNewAddress","getProducts","getAddresses","_ref6","address","currAddress","deleteAddress","_ref7","_callee6","addressId","_context6","delete","validateRequest","performCheckout","_ref8","_callee7","_context7","success","onLoadHandler","_ref9","_callee8","cartDetails","_context8","mt","ml","role","sx","mr","Delete","CreditCard","bgcolor","Thanks","App","BrowserRouter","Switch","Route","exact","path","createTheme","typography","fontFamily","palette","primary","light","main","dark","contrastText","ReactDOM","render","React","StrictMode","SnackbarProvider","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.7a0e0ece.chunk.js","sourcesContent":["import { Box } from \"@mui/system\";\nimport React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => {\n  return (\n    <Box className=\"footer\">\n      <Box>\n        <img src=\"logo_dark.svg\" alt=\"QKart-icon\"></img>\n      </Box>\n      <p className=\"footer-text\">\n        QKart is your one stop solution to the buy the latest trending items\n        with India's Fastest Delivery to your doorstep\n      </p>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { Avatar, Button, Stack } from \"@mui/material\";\nimport { useHistory } from \"react-router-dom\";\nimport Box from \"@mui/material/Box\";\nimport React from \"react\";\nimport \"./Header.css\";\nconst Header = ({ children, hasHiddenAuthButtons }) => {\n  const history = useHistory();\n  let user = localStorage.getItem(\"username\");\n  return (\n    <Box className=\"header\">\n      <Box className=\"header-title\">\n        <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n      </Box>\n      {children}\n      {hasHiddenAuthButtons ? (\n        <Button\n          className=\"explore-button\"\n          startIcon={<ArrowBackIcon />}\n          variant=\"text\"\n          onClick={() => {\n            history.push(\"/\");\n          }}\n        >\n          Back to explore\n        </Button>\n      ) : (\n        <Stack direction=\"row\" alignItems=\"center\">\n          {user ? (\n            <>\n              <Avatar alt={user} src=\"avatar.png\" style={{marginRight:\"7px\"}}/>\n              {/* <img src=\"avatar.png\" alt=\"User avatar\" className=\"userAvatar\" /> */}\n              <span className=\"username-text\">{user}</span>\n              <Button\n                className=\"explore-button\"\n                variant=\"text\"\n                onClick={() => {\n                  localStorage.clear();\n                  history.push(\"/\");\n                  // window.location.reload();\n                }}\n              >\n                LOGOUT\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button\n                variant=\"text\"\n                className=\"explore-button\"\n                style={{ marginRight: \"10px\" }}\n                onClick={() => {\n                  history.push(\"/login\");\n                }}\n              >\n                LOGIN\n              </Button>\n              <Button\n                variant=\"contained\"\n                className=\"register-button\"\n                onClick={() => {\n                  history.push(\"/register\");\n                }}\n              >\n                REGISTER\n              </Button>\n            </>\n          )}\n        </Stack>\n      )}\n    </Box>\n  );\n};\n\nexport default Header;\n","import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Register.css\";\n\nconst Register = () => {\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  // TODO: CRIO_TASK_MODULE_REGISTER - Implement the register function\n  /**\n   * Definition for register handler\n   * - Function to be called when the user clicks on the register button or submits the register form\n   *\n   * @param {{ username: string, password: string, confirmPassword: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/register\"\n   *\n   * Example for successful response from backend for the API call:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   * }\n   *\n   * Example for failed response from backend for the API call:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Username is already taken\"\n   * }\n   */\n  const register = async (formData) => {\n    if (validateInput(formData)) {\n      try {\n        setIsLoading(true);\n        const response = await axios.post(config.endpoint + \"/auth/register\", {\n          username: formData.username,\n          password: formData.password,\n        });\n        if (response.status === 201) {\n          enqueueSnackbar(\"Registered successful!\", { variant: \"success\" });\n          setIsLoading(false);\n          history.push('/login');\n        }\n      } catch (error) {\n        setIsLoading(false);\n        if (\n          error.response &&\n          error.response.data &&\n          error.response.status >= 400 &&\n          error.response.status < 500\n        ) {\n          enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n        } else {\n          enqueueSnackbar(\n            \"Something went wrong. Check that the backend is running, reachable and returns valid JSON\",\n            { variant: \"error\" }\n          );\n        }\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_REGISTER - Implement user input validation logic\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string, confirmPassword: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that username field is not less than 6 characters in length - \"Username must be at least 6 characters\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   * -    Check that password field is not less than 6 characters in length - \"Password must be at least 6 characters\"\n   * -    Check that confirmPassword field has the same value as password field - Passwords do not match\n   */\n  const validateInput = (data) => {\n    if (data.username === \"\") {\n      enqueueSnackbar(\"Username is a required field\", { variant: \"warning\" });\n      return false;\n    }\n    if (data.username.length < 6) {\n      enqueueSnackbar(\"Username must be alteast 6 characters\", {\n        variant: \"warning\",\n      });\n      return false;\n    }\n    if (data.password === \"\") {\n      enqueueSnackbar(\"Password is a required field\", { variant: \"warning\" });\n      return false;\n    }\n    if (data.password.length < 6) {\n      enqueueSnackbar(\"Password must be alteast 6 characters\", {\n        variant: \"warning\",\n      });\n      return false;\n    }\n    if (data.password !== data.confirmPassword) {\n      enqueueSnackbar(\"Password and Confirm Password do not match.\", {\n        variant: \"warning\",\n      });\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className=\"title\">Register</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            variant=\"outlined\"\n            title=\"Username\"\n            name=\"username\"\n            placeholder=\"Enter Username\"\n            fullWidth\n            value={formData.username}\n            onChange={(e) =>\n              setFormData({ ...formData, username: e.target.value })\n            }\n          />\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            helperText=\"Password must be atleast 6 characters length\"\n            fullWidth\n            placeholder=\"Enter a password with minimum 6 characters\"\n            value={formData.password}\n            onChange={(e) =>\n              setFormData({ ...formData, password: e.target.value })\n            }\n          />\n          <TextField\n            id=\"confirmPassword\"\n            variant=\"outlined\"\n            label=\"Confirm Password\"\n            name=\"confirmPassword\"\n            type=\"password\"\n            fullWidth\n            value={formData.confirmPassword}\n            onChange={(e) =>\n              setFormData({ ...formData, confirmPassword: e.target.value })\n            }\n          />\n          {isLoading ? (\n            <Box style={{ justifyContent: \"center\", display: \"flex\" }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Button\n              className=\"button\"\n              variant=\"contained\"\n              onClick={() => register(formData)}\n            >\n              Register Now\n            </Button>\n          )}\n          <p className=\"secondary-action\">\n            Already have an account? &nbsp;\n            <Link to=\"/login\" className=\"linkText\">Login here</Link>\n          </p>\n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Register;\n \n","import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Login.css\";\nimport \"../ipConfig.json\";\n\nconst Login = () => {\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response\n  /**\n   * Perform the Login API call\n   * @param {{ username: string, password: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/login\"\n   *\n   * Example for successful response from backend:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   *      \"token\": \"testtoken\",\n   *      \"username\": \"criodo\",\n   *      \"balance\": 5000\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Password is incorrect\"\n   * }\n   *\n   */\n  const login = async (formData) => {\n    if (validateInput(formData)) {\n      try {\n        setIsLoading(true);\n        const response = await axios.post(config.endpoint + \"/auth/login\", {\n          username: formData.username,\n          password: formData.password,\n        });\n        if (response.status === 201) {\n          enqueueSnackbar(\"Logged in successfully\", { variant: \"success\" });\n          persistLogin(\n            response.data.token,\n            response.data.username,\n            response.data.balance\n          );\n          setIsLoading(false);\n          history.push(\"/\");\n        }\n      } catch (error) {\n        setIsLoading(false);\n        if (\n          error?.response?.data &&\n          error.response.status >= 400 &&\n          error.response.status < 500\n        ) {\n          enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n        } else {\n          enqueueSnackbar(\n            \"Something went wrong. Check that the backend is running, reachable and returns valid JSON\",\n            { variant: \"error\" }\n          );\n        }\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false and show warning message if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   */\n  const validateInput = ({username=\"\", password = \"\"}) => {\n    if (username === \"\") {\n      enqueueSnackbar(\"Username is a required field\", { variant: \"warning\" });\n      return false;\n    }\n    if (password === \"\") {\n      enqueueSnackbar(\"Password is a required field\", { variant: \"warning\" });\n      return false;\n    }\n    return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} username\n   *    Username of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `username` field in localStorage can be used to store the username that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   */\n  const persistLogin = (token, username, balance) => {\n    // console.log(token);\n    // console.log(username);\n    // console.log(balance);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"username\", username);\n    localStorage.setItem(\"balance\", balance);\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className=\"title\">Login</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            variant=\"outlined\"\n            title=\"Username\"\n            name=\"username\"\n            placeholder=\"Username\"\n            fullWidth\n            value={formData.username}\n            onChange={(e) =>\n              setFormData({ ...formData, username: e.target.value })\n            }\n          />\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            fullWidth\n            placeholder=\"Password\"\n            value={formData.password}\n            onChange={(e) =>\n              setFormData({ ...formData, password: e.target.value })\n            }\n          />\n          {isLoading ? (\n            <Box style={{ justifyContent: \"center\", display: \"flex\" }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Button\n              className=\"button\"\n              variant=\"contained\"\n              onClick={() => login(formData)}\n            >\n              Login To QKart\n            </Button>\n          )}\n          <p className=\"secondary-action\">\n            Don't have an account? &nbsp;\n            <Link to=\"/register\" className=\"linkText\">\n              Register now\n            </Link>\n          </p>\n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Login;\n","import { AddShoppingCartOutlined } from \"@mui/icons-material\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Rating,\n  Typography,\n} from \"@mui/material\";\nimport React from \"react\";\nimport \"./ProductCard.css\";\nconst ProductCard = ({ product, handleAddToCart }) => {\n  return (\n    <Card className=\"card\">\n      <CardMedia component=\"img\" image={product.image} alt={product._id} />\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\">\n          {product.name}\n        </Typography>\n        <Typography gutterBottom fontWeight=\"bold\">\n          ${product.cost}\n        </Typography>\n        <Rating value={product.rating} readOnly />\n      </CardContent>\n      <CardActions className=\"card-actions\">\n        <Button\n          variant=\"contained\"\n          startIcon={<AddShoppingCartOutlined />}\n          className=\"card-button\"\n          fullWidth\n          onClick={handleAddToCart}\n        >\n          Add to cart\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\nexport default ProductCard;\n","import {\n  AddOutlined,\n  RemoveOutlined,\n  ShoppingCart,\n  ShoppingCartOutlined,\n} from \"@mui/icons-material\";\nimport { Button, IconButton, Stack, Divider } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Cart.css\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { Array.<{ productId: String, qty: Number }> } cartData\n *    Array of objects with productId and quantity of products in cart\n *\n * @param { Array.<Product> } productsData\n *    Array of objects with complete data on all available products\n *\n * @returns { Array.<CartItem> }\n *    Array of objects with complete data on products in cart\n *\n */\nexport const generateCartItemsFrom = (cartData, productsData) => {\n  let cartProducts = [];\n  if (cartData.length && productsData.length) {\n    for (let i = 0; i < cartData.length; i++) {\n      for (let j = 0; j < productsData.length; j++) {\n        if (cartData[i].productId === productsData[j]._id) {\n          cartProducts.push({ ...productsData[j], ...cartData[i] });\n        }\n      }\n    }\n  }\n\n  return cartProducts;\n};\n\n/**\n * Get the total value of all products added to the cart\n *\n * @param { Array.<CartItem> } items\n *    Array of objects with complete data on products added to the cart\n *\n * @returns { Number }\n *    Value of all items in the cart\n *\n */\nexport const getTotalCartValue = (items = []) => {\n  return items.reduce((acc, curr) => {\n    let itemvalue = curr.cost * curr.qty;\n    return acc + itemvalue;\n  }, 0);\n};\n\n// TODO: CRIO_TASK_MODULE_CHECKOUT - Implement function to return total cart quantity\n/**\n * Return the sum of quantities of all products added to the cart\n *\n * @param { Array.<CartItem> } items\n *    Array of objects with complete data on products in cart\n *\n * @returns { Number }\n *    Total quantity of products added to the cart\n *\n */\nexport const getTotalItems = (items = []) => {\n  let itemsCount = items.map((item) => {\n    let count = 0;\n    if (item.productId) count++;\n    return count;\n  });\n  return itemsCount.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n// TODO: CRIO_TASK_MODULE_CHECKOUT - Add static quantity view for Checkout page cart\n/**\n * Component to display the current quantity for a product and + and - buttons to update product quantity on cart\n *\n * @param {Number} value\n *    Current quantity of product in cart\n *\n * @param {Function} handleAdd\n *    Handler function which adds 1 more of a product to cart\n *\n * @param {Function} handleDelete\n *    Handler function which reduces the quantity of a product in cart by 1\n *\n * @param {Boolean} isReadOnly\n *    If product quantity on cart is to be displayed as read only without the + - options to change quantity\n *\n */\nconst ItemQuantity = ({\n  value,\n  handleAdd,\n  handleDelete,\n  isReadOnly = false,\n}) => {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n      <IconButton size=\"medium\" color=\"success\" onClick={handleDelete}>\n        <RemoveOutlined />\n      </IconButton>\n      <Box padding=\"0.5rem\" data-testid=\"item-qty\">\n        {value}\n      </Box>\n      <IconButton size=\"medium\" color=\"success\" onClick={handleAdd}>\n        <AddOutlined />\n      </IconButton>\n    </Stack>\n  );\n};\n\nlet OrderDetailsView = ({ items = [] }) => {\n  return (\n    <>\n      <Box className=\"cart\">\n        <Box display=\"flex\" flexDirection=\"column\" padding=\"1rem\">\n          <h2>Order Details</h2>\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"space-between\"\n            // alignItems=\"flex-start\"\n          >\n            <Box>\n              <p>Products</p>\n              <p>Subtotal</p>\n              <p>Shipping Charges</p>\n              <h3>Total</h3>\n            </Box>\n            <Box style={{ textAlign: \"right\" }}>\n              <p>{getTotalItems(items)}</p>\n              <p>${getTotalCartValue(items)}</p>\n              <p>$0</p>\n              <h3>${getTotalCartValue(items)}</h3>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\n/**\n * Component to display the Cart view\n *\n * @param { Array.<Product> } products\n *    Array of objects with complete data of all available products\n *\n * @param { Array.<Product> } items\n *    Array of objects with complete data on products in cart\n *\n * @param {Function} handleDelete\n *    Current quantity of product in cart\n *\n * @param {Boolean} isReadOnly\n *    If product quantity on cart is to be displayed as read only without the + - options to change quantity\n *\n */\nconst Cart = ({ products, items = [], handleQuantity, isReadOnly = false }) => {\n  let history = useHistory();\n\n  if (!items.length) {\n    return (\n      <Box className=\"cart empty\">\n        <ShoppingCartOutlined className=\"empty-cart-icon\" />\n        <Box color=\"#aaa\" textAlign=\"center\">\n          Cart is empty. Add more items to the cart to checkout.\n        </Box>\n      </Box>\n    );\n  }\n  return (\n    <>\n      <Box className=\"cart\">\n        {/* TODO: CRIO_TASK_MODULE_CART - Display view for each cart item with non-zero quantity */}\n        {items.map((item) => (\n          <Box\n            display=\"flex\"\n            alignItems=\"flex-start\"\n            padding=\"1rem\"\n            key={item.productId}\n          >\n            <Box className=\"image-container\">\n              <img\n                src={item.image}\n                alt={item.name}\n                width=\"100%\"\n                height=\"100%\"\n              />\n            </Box>\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"space-between\"\n              height=\"6rem\"\n              paddingX=\"1rem\"\n            >\n              <div>{item.name}</div>\n              <Box\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n              >\n                {isReadOnly ? (\n                  <Box style={{ fontSize: \"1rem\" }}>Qty: {item.qty}</Box>\n                ) : (\n                  <ItemQuantity\n                    value={item.qty}\n                    handleAdd={() =>\n                      handleQuantity(item.productId, item.qty + 1)\n                    }\n                    handleDelete={() =>\n                      handleQuantity(item.productId, item.qty - 1)\n                    }\n                  />\n                )}\n                <Box padding=\"0.5rem\" fontWeight=\"700\">\n                  ${item.cost}\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        ))}\n\n        {/* TODO: CRIO_TASK_MODULE_CART - Display view for each cart item with non-zero quantity */}\n        <Divider />\n        <Box\n          padding=\"1rem\"\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Box color=\"#3C3C3C\" alignSelf=\"center\">\n            Order total\n          </Box>\n          <Box\n            color=\"#3C3C3C\"\n            fontWeight=\"700\"\n            fontSize=\"1.5rem\"\n            alignSelf=\"center\"\n            data-testid=\"cart-total\"\n          >\n            ${getTotalCartValue(items)}\n          </Box>\n        </Box>\n\n        {isReadOnly ? null : (\n          <Box display=\"flex\" justifyContent=\"flex-end\" className=\"cart-footer\">\n            <Button\n              color=\"success\"\n              variant=\"contained\"\n              startIcon={<ShoppingCart />}\n              className=\"checkout-btn\"\n              onClick={() => {\n                history.push(\"/checkout\");\n              }}\n            >\n              Checkout\n            </Button>\n          </Box>\n        )}\n      </Box>\n      {isReadOnly ? <OrderDetailsView items={items} /> : null}\n    </>\n  );\n};\n\nexport default Cart;","import { Search, SentimentDissatisfied } from \"@mui/icons-material\";\nimport {\n  CircularProgress,\n  Grid,\n  InputAdornment,\n  TextField,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport ProductCard from \"./ProductCard\";\nimport Cart from \"./Cart\";\nimport { generateCartItemsFrom } from \"./Cart\";\nimport \"./Products.css\";\n\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} productId - Unique ID for the product\n */\n// ALTERNATE OF ABOVE FROM CART.JS\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\nconst Products = () => {\n  let { enqueueSnackbar } = useSnackbar();\n\n  let token = localStorage.getItem(\"token\");\n  let username = localStorage.getItem(\"username\");\n  // let balance = localStorage.getItem(\"balance\");\n\n  const [productDetails, setProductDetails] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartLoad, setCartLoad] = useState(false);\n  const [timeoutId, setTimeoutId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  /**\n   * Make API call to get the products list and store it to display the products\n   *\n   * @returns { Array.<Product> }\n   *      Array of objects with complete data on all available products\n   *\n   * API endpoint - \"GET /products\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"name\": \"iPhone XR\",\n   *          \"category\": \"Phones\",\n   *          \"cost\": 100,\n   *          \"rating\": 4,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"v4sLtEcMpzabRyfx\"\n   *      },\n   *      {\n   *          \"name\": \"Basketball\",\n   *          \"category\": \"Sports\",\n   *          \"cost\": 100,\n   *          \"rating\": 5,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 500\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Something went wrong. Check the backend console for more details\"\n   * }\n   */\n\n   useEffect(() => {\n    performAPICall();\n  }, []);\n\n  useEffect(() => {\n    fetchCart(token);\n  }, [cartLoad]);\n\n  const performAPICall = async () => {\n    setIsLoading(true);\n    try {\n      let response = await axios.get(`${config.endpoint}/products`);\n      setProductDetails(response.data);\n      setFilteredProducts(response.data);\n      setCartLoad(true);\n    } catch (error) {\n      if (error.response && error.response.status === 400) {\n        enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n      }\n    }\n    setIsLoading(false);\n  };\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Implement search logic\n  /**\n   * Definition for search handler\n   * This is the function that is called on adding new search keys\n   *\n   * @param {string} text\n   *    Text user types in the search bar. To filter the displayed products based on this text.\n   *\n   * @returns { Array.<Product> }\n   *      Array of objects with complete data on filtered set of products\n   *\n   * API endpoint - \"GET /products/search?value=<search-query>\"\n   *\n   */\n  const performSearch = async (text) => {\n    setIsLoading(true);\n    try {\n      let response = await axios.get(\n        `${config.endpoint}/products/search?value=${text}`\n      );\n      setFilteredProducts(response.data);\n    } catch (error) {\n      if (error.response) {\n        if (error.response.status === 404) {\n          setFilteredProducts([]);\n        }\n        if (error.response.status === 500) {\n          enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n          setFilteredProducts(productDetails);\n        }\n      } else {\n        enqueueSnackbar(\n          \"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\",\n          { variant: \"error\" }\n        );\n      }\n    }\n    setIsLoading(false);\n  };\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Optimise API calls with debounce search implementation\n  /**\n   * Definition for debounce handler\n   * With debounce, this is the function to be called whenever the user types text in the searchbar field\n   *\n   * @param {{ target: { value: string } }} event\n   *    JS event object emitted from the search input field\n   *\n   * @param {NodeJS.Timeout} debounceTimeout\n   *    Timer id set for the previous debounce call\n   *\n   */\n\n  const debounceSearch = (event, debounceTimeout) => {\n    let searchText = event.target.value;\n    if (debounceTimeout) {\n      clearTimeout(debounceTimeout);\n    }\n    let timeOut = setTimeout(() => {\n      performSearch(searchText);\n    }, 500);\n    setTimeoutId(timeOut);\n  };\n\n  /**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @param {string} token - Authentication token returned on login\n   *\n   * @returns { Array.<{ productId: string, qty: number }> | null }\n   *    The response JSON object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const fetchCart = async (token) => {\n    if (!token) return;\n\n    try {\n      // TODO: CRIO_TASK_MODULE_CART - Pass Bearer token inside \"Authorization\" header to get data from \"GET /cart\" API and return the response data\n      let response = await axios.get(`${config.endpoint}/cart`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (response.status === 200) {\n        setCartItems(generateCartItemsFrom(response.data, productDetails));\n      }\n    } catch (e) {\n      if (e.response && e.response.status === 400) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n      return null;\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CART - Return if a product already exists in the cart\n  /**\n   * Return if a product already is present in the cart\n   *\n   * @param { Array.<{ productId: String, quantity: Number }> } items\n   *    Array of objects with productId and quantity of products in cart\n   * @param { String } productId\n   *    Id of a product to be checked\n   *\n   * @returns { Boolean }\n   *    Whether a product of given \"productId\" exists in the \"items\" array\n   *\n   */\n  const isItemInCart = (items, productId) => {\n    let isInCart = false;\n    items.forEach((item) => {\n      if (item.productId === productId) isInCart = true;\n    });\n    return isInCart;\n  };\n\n  /**\n   * Perform the API call to add or update items in the user's cart and update local cart data to display the latest cart\n   *\n   * @param {string} token\n   *    Authentication token returned on login\n   * @param { Array.<{ productId: String, quantity: Number }> } items      // cartItems\n   *    Array of objects with productId and quantity of products in cart\n   * @param { Array.<Product> } products                                  // productDetails\n   *    Array of objects with complete data on all available products\n   * @param {string} productId                                            // cartItems.productId\n   *    ID of the product that is to be added or updated in cart\n   * @param {number} qty                                                  // cartItems.qty\n   *    How many of the product should be in the cart\n   * @param {boolean} options                                             //\n   *    If this function was triggered from the product card's \"Add to Cart\" button\n   *\n   * Example for successful response from backend:\n   * HTTP 200 - Updated list of cart items\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 404 - On invalid productId\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Product doesn't exist\"\n   * }\n   */\n\n  const addToCart = async (\n    token,\n    items,\n    products,\n    productId,\n    qty,\n    options = { preventDuplicate: false }\n  ) => {\n    if (token) {\n      if (!isItemInCart(items, productId)) {\n        addInCart(productId, qty);\n      } else {\n        enqueueSnackbar(\n          \"Item already in cart. Use the cart sidebar to update quantity or remove item.\",\n          {\n            variant: \"warning\",\n          }\n        );\n      }\n    } else {\n      enqueueSnackbar(\"Login to add an item to the Cart\", {\n        variant: \"warning\",\n      });\n    }\n  };\n\n  let handleCart = (productId) => {\n    addToCart(token, cartItems, productDetails, productId, 1);\n  };\n\n  let handleQuantity = (productId, qty) => {\n    addInCart(productId, qty);\n  };\n\n  let addInCart = async (productId, qty) => {\n    try {\n      let response = await axios.post(\n        `${config.endpoint}/cart`,\n        {\n          productId: productId,\n          qty: qty,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      //Update cartItems\n      setCartItems(generateCartItemsFrom(response.data, productDetails));\n    } catch (e) {\n      if (e.response && e.response.status === 400) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\"Could not add to cart. Something went wrong.\", {\n          variant: \"error\",\n        });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Header>\n        <Box width={350}>\n          <TextField\n            className=\"search-desktop\"\n            size=\"small\"\n            fullWidth\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <Search color=\"success\" />\n                </InputAdornment>\n              ),\n            }}\n            placeholder=\"Search for items/categories\"\n            name=\"search\"\n            onChange={(e) => debounceSearch(e, timeoutId)}\n          />\n        </Box>\n      </Header>\n\n      {/* Search view for mobiles */}\n      <TextField\n        className=\"search-mobile\"\n        size=\"small\"\n        fullWidth\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Search color=\"success\" />\n            </InputAdornment>\n          ),\n        }}\n        placeholder=\"Search for items/categories\"\n        name=\"search\"\n        onChange={(e) => debounceSearch(e, timeoutId)}\n      />\n      {/* Search view for mobiles */}\n\n      <Grid container>\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          xs\n          md\n        >\n          <Grid item className=\"product-grid\">\n            <Box className=\"hero\">\n              <p className=\"hero-heading\">\n                India’s <span className=\"hero-highlight\">FASTEST DELIVERY</span>{\" \"}\n                to your door step\n              </p>\n            </Box>\n          </Grid>\n          {isLoading ? (\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              py={10}\n            >\n              <CircularProgress size={40} />\n              <h4>Loading Products...</h4>\n            </Box>\n          ) : (\n            <Grid\n              container\n              item\n              spacing={1}\n              my={3}\n              mx={2}\n              justifyContent=\"center\"\n              direction=\"row\"\n            >\n              {filteredProducts.length ? (\n                filteredProducts.map((product) => (\n                  <Grid item key={product[\"_id\"]} xs={6} md={3}>\n                    <ProductCard\n                      product={product}\n                      handleAddToCart={(event) => handleCart(product[\"_id\"])}\n                    />\n                  </Grid>\n                ))\n              ) : (\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  py={10}\n                >\n                  <SentimentDissatisfied />\n                  <h4>No products found</h4>\n                </Box>\n              )}\n            </Grid>\n          )}\n        </Grid>\n        {/* TODO: CRIO_TASK_MODULE_CART - Display the Cart component */}\n        {username && (\n          <Grid\n            container\n            item\n            xs={12}\n            md={3}\n            style={{ backgroundColor: \"#E9F5E1\", height: \"100vh\" }}\n            justifyContent=\"center \"\n            alignItems=\"stretch\"\n          >\n            <Cart\n              items={cartItems}\n              products={productDetails}\n              handleQuantity={handleQuantity}\n            />\n          </Grid>\n        )}\n      </Grid>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Products;\n","import { CreditCard, Delete } from \"@mui/icons-material\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart, { getTotalCartValue, generateCartItemsFrom } from \"./Cart\";\nimport \"./Checkout.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * @typedef {Object} Address - Data on added address\n *\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */\n\n/**\n * @typedef {Object} Addresses - Data on all added addresses\n *\n * @property {Array.<Address>} all - Data on all added addresses\n * @property {string} selected - Id of the currently selected address\n */\n\n/**\n * @typedef {Object} NewAddress - Data on the new address being typed\n *\n * @property { Boolean } isAddingNewAddress - If a new address is being added\n * @property { String} value - Latest value of the address being typed\n */\n\n// TODO: CRIO_TASK_MODULE_CHECKOUT - Should allow to type a new address in the text field and add the new address or cancel adding new address\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { String } token\n *    Login token\n *\n * @param { NewAddress } newAddress\n *    Data on new address being added\n *\n * @param { Function } handleNewAddress\n *    Handler function to set the new address field to the latest typed value\n *\n * @param { Function } addAddress\n *    Handler function to make an API call to add the new address\n *\n * @returns { JSX.Element }\n *    JSX for the Add new address view\n *\n */\nconst AddNewAddressView = ({\n  token,\n  newAddress,\n  handleNewAddress,\n  addAddress,\n}) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <TextField\n        multiline\n        minRows={4}\n        placeholder=\"Enter your complete address\"\n        onChange={(e) => {\n          handleNewAddress({ ...newAddress, value: e.target.value });\n        }}\n      />\n      <Stack direction=\"row\" my=\"1rem\">\n        <Button\n          color=\"success\"\n          variant=\"contained\"\n          onClick={async () => {\n            await addAddress(token, newAddress);\n          }}\n        >\n          Add\n        </Button>\n        <Button\n\n          color=\"success\"\n          variant=\"text\"\n          onClick={() => {\n            handleNewAddress({ isAddingNewAddress: false, value: \"\" });\n          }}\n        >\n          Cancel\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nconst Checkout = () => {\n  const token = localStorage.getItem(\"token\");\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [items, setItems] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [addresses, setAddresses] = useState({ all: [], selected: \"\" });\n  const [newAddress, setNewAddress] = useState({\n    isAddingNewAddress: false,\n    value: \"\",\n  });\n\n  const getProducts = async () => {\n    try {\n      const response = await axios.get(`${config.endpoint}/products`);\n\n      setProducts(response.data);\n      return response.data;\n    } catch (e) {\n      if (e.response && e.response.status === 500) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n        return null;\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  const fetchCart = async (token) => {\n    if (!token) return;\n    try {\n      const response = await axios.get(`${config.endpoint}/cart`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Fetch list of addresses for a user\n   *\n   * API Endpoint - \"GET /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const getAddresses = async (token) => {\n    if (!token) {\n      history.push(\"/\");\n    }\n    try {\n      const response = await axios.get(`${config.endpoint}/user/addresses`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setAddresses({ ...addresses, all: response.data });\n    } catch {\n      if (!token) {\n        enqueueSnackbar(\"You must be logged in to access checkout page\", {\n          variant: \"info\",\n        });\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch addresses. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  /**\n   * Handler function to add a new address and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { NewAddress } newAddress\n   *    Data on new address being added\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"POST /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const addAddress = async (token, newAddress) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Add new address to the backend and display the latest list of addresses\n      const response = await axios.post(\n        `${config.endpoint}/user/addresses`,\n        {\n          address: newAddress.value,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      setAddresses({ ...addresses, all: response.data });\n      setNewAddress((currAddress) => ({\n        ...currAddress,\n        isAddingNewAddress: false,\n        value: \"\",\n      }));\n\n      enqueueSnackbar(\"New Address added Successfully\", {\n        variant: \"success\",\n      });\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not add this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  /**\n   * Handler function to delete an address from the backend and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { String } addressId\n   *    Id value of the address to be deleted\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"DELETE /user/addresses/:addressId\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const deleteAddress = async (token, addressId) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Delete selected address from the backend and display the latest list of addresses\n      let response = await axios.delete(\n        `${config.endpoint}/user/addresses/${addressId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      setAddresses({ ...addresses, all: response.data });\n      enqueueSnackbar(\"Deleted\", { variant: \"success\" });\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT - Validate request for checkout\n  /**\n   * Return if the request validation passed. If it fails, display appropriate warning message.\n   *\n   * Validation checks - show warning message with given text if any of these validation fails\n   *\n   *  1. Not enough balance available to checkout cart items\n   *    \"You do not have enough balance in your wallet for this purchase\"\n   *\n   *  2. No addresses added for user\n   *    \"Please add a new address before proceeding.\"\n   *\n   *  3. No address selected for checkout\n   *    \"Please select one shipping address to proceed.\"\n   *\n   * @param { Array.<CartItem> } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    Whether validation passed or not\n   *\n   */\n  const validateRequest = (items, addresses) => {\n    if (getTotalCartValue(items) > localStorage.getItem(\"balance\")) {\n      enqueueSnackbar(\n        \"You do not have enough balance in your wallet for this purchase\",\n        { variant: \"warning\" }\n      );\n      return false;\n    }\n    if (addresses.all.length === 0) {\n      enqueueSnackbar(\"Please add a new address before proceeding.\", {\n        variant: \"warning\",\n      });\n      return false;\n    }\n    if (!addresses.selected && addresses.all.length > 0) {\n      enqueueSnackbar(\"Please select one shipping address to proceed.\", {\n        variant: \"warning\",\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT\n  /**\n   * Handler function to perform checkout operation for items added to the cart for the selected address\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { Array.<CartItem } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    If checkout operation was successful\n   *\n   * API endpoint - \"POST /cart/checkout\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *  \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *  \"success\": false,\n   *  \"message\": \"Wallet balance not sufficient to place order\"\n   * }\n   *\n   */\n  const performCheckout = async (token, items, addresses) => {\n    let flag = validateRequest(items, addresses);\n    if (flag) {\n      try {\n        let response = await axios.post(\n          `${config.endpoint}/cart/checkout`,\n          { addressId: addresses.selected },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n        if (response.data.success) {\n          let balance =\n            localStorage.getItem(\"balance\") - getTotalCartValue(items);\n          localStorage.setItem(\"balance\", balance);\n          history.push(\"/thanks\");\n          enqueueSnackbar(\"Order placed successfully\", {\n            variant: \"success\",\n          });\n          return true;\n        }\n      } catch (e) {\n        if (e.response) {\n          enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n        } else {\n          enqueueSnackbar(\n            \"Could not place order. Check that the backend is running, reachable and returns valid JSON.\",\n            {\n              variant: \"error\",\n            }\n          );\n        }\n      }\n    } else {\n      return false;\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT - Fetch addressses if logged in, otherwise show info message and redirect to Products page\n\n  // Fetch products and cart data on page load\n  useEffect(() => {\n    const onLoadHandler = async () => {\n      const productsData = await getProducts();\n\n      const cartData = await fetchCart(token);\n\n      if (productsData && cartData) {\n        const cartDetails = await generateCartItemsFrom(cartData, productsData);\n        setItems(cartDetails);\n      }\n\n      await getAddresses(token);\n    };\n    onLoadHandler();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={12} md={9}>\n          <Box className=\"shipping-container\" minHeight=\"100vh\">\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Shipping\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Manage all the shipping addresses you want. This way you won't\n              have to enter the shipping address manually with every order.\n              Select the address you want to get your order delivered.\n            </Typography>\n            <Divider />\n            {/* TODO: CRIO_TASK_MODULE_CHECKOUT - Display list of addresses and corresponding \"Delete\" buttons, if present, of which 1 can be selected */}\n            {addresses.all.length === 0 && (\n              <Typography my=\"1rem\">\n                No addresses found for this account. Please add one to proceed\n              </Typography>\n            )}\n            {addresses.all.length > 0 &&\n              addresses.all.map((address) => (\n                <Box\n                  className={\n                    addresses.selected === address._id\n                      ? \"address-item selected\"\n                      : \"address-item not-selected\"\n                  }\n                  display=\"flex\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"center\"\n                  mt={3}\n                  key={address._id}\n                >\n                  <Box ml={1} width=\"100%\">\n                    <Button\n                      type=\"text\"\n                      role=\"text\"\n                      variant=\"text\"\n                      sx={{ color: \"black\"}}\n                      onClick={() => {\n                        setAddresses({ ...addresses, selected: address._id });\n                      }}\n                    >\n                      {address.address}\n                    </Button>\n                  </Box>\n                  <Box mr={1}>\n                    <Button\n                    color=\"success\"\n                      onClick={() => {\n                        deleteAddress(token, address._id);\n                      }}\n                    >\n                      <Delete /> Delete\n                    </Button>\n                  </Box>\n                </Box>\n              ))}\n\n            {/* TODO: CRIO_TASK_MODULE_CHECKOUT - Dislay either \"Add new address\" button or the <AddNewAddressView> component to edit the currently selected address */}\n            {!newAddress.isAddingNewAddress && (\n              <Button\n                color=\"success\"\n                variant=\"contained\"\n                id=\"add-new-btn\"\n                size=\"large\"\n                onClick={() => {\n                  setNewAddress({ ...newAddress, isAddingNewAddress: true });\n                }}\n              >\n                Add new address\n              </Button>\n            )}\n            {newAddress.isAddingNewAddress && (\n              <AddNewAddressView\n                token={token}\n                newAddress={newAddress}\n                handleNewAddress={setNewAddress}\n                addAddress={addAddress}\n              />\n            )}\n\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Payment\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Payment Method\n            </Typography>\n            <Divider />\n\n            <Box my=\"1rem\">\n              <Typography>Wallet</Typography>\n              <Typography>\n                Pay ${getTotalCartValue(items)} of available $\n                {localStorage.getItem(\"balance\")}\n              </Typography>\n            </Box>\n\n            <Button\n              startIcon={<CreditCard />}\n              variant=\"contained\"\n              color=\"success\"\n              onClick={() => performCheckout(token, items, addresses)}\n            >\n              PLACE ORDER\n            </Button>\n          </Box>\n        </Grid>\n        <Grid item xs={12} md={3} bgcolor=\"#E9F5E1\">\n          <Cart isReadOnly={true} products={products} items={items} />\n        </Grid>\n      </Grid>\n      <Footer />\n    </>\n  );\n};\n\nexport default Checkout;\n\n\n// Mistakes - \n// 1. When button consists of text add the following params - role, type and variant as text.","import { Button } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Thanks.css\";\n\nconst Thanks = () => {\n  const history = useHistory();\n\n  const routeToProducts = () => {\n    history.push(\"/\");\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      history.push(\"/\");\n    }\n  }, [history]);\n\n  return (\n    <>\n      <Header />\n      <Box className=\"greeting-container\">\n        <h2>Yay! It's ordered 😃</h2>\n        <p>You will receive an invoice for your order shortly.</p>\n        <p>Your order will arrive in 7 business days.</p>\n        <p id=\"balance-overline\">Wallet Balance</p>\n        <p id=\"balance\">${localStorage.getItem(\"balance\")} Available</p>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          color=\"success\"\n          id=\"continue-btn\"\n          onClick={routeToProducts}\n        >\n          Continue Shopping\n        </Button>\n      </Box>\n      <Footer />\n    </>\n  );\n};\n\nexport default Thanks;\n","import Register from \"./components/Register\";\nimport ipConfig from \"./ipConfig.json\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Products from \"./components/Products\";\nimport Checkout from \"./components/Checkout\";\nimport Thanks from \"./components/Thanks\";\n\nexport const config = {\n  endpoint: `https://qkart-frontend-6zoc.onrender.com/api/v1`,\n};\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        {/* TODO: CRIO_TASK_MODULE_LOGIN - To add configure routes and their mapping */}\n        <Switch>\n          <Route exact path=\"/\" component={Products} />\n          <Route path = \"/register\" component={Register} />\n          <Route path = \"/login\" component={Login} />\n          <Route path = \"/checkout\" component={Checkout} />\n          <Route path = \"/thanks\" component={Thanks} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: \"Lato\"\n  },\n  palette: {\n    primary: {\n      light: \"#45c09f\",\n      main: \"#00a278\",\n      dark: \"#00845c\",\n      contrastText: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { SnackbarProvider } from \"notistack\";\nimport { ThemeProvider } from \"@mui/system\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n        <SnackbarProvider\n          maxSnack={1}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\",\n          }}\n          preventDuplicate\n        >\n          <App />\n        </SnackbarProvider>\n  </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}